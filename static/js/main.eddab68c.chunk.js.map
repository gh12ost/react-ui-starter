{"version":3,"sources":["Navigation.tsx","Notification.tsx","SendOneLamportToRandomAddress.tsx","Wallet.tsx","index.tsx"],"names":["Navigation","wallet","useWallet","require","Notification","message","variant","className","TOKEN_PROGRAM","PublicKey","SendOneLamportToRandomAddress","connection","useConnection","publicKey","sendTransaction","useState","name","setName","c","Connection","onClick","a","WalletNotConnectedError","transaction","Transaction","add","splToken","createCloseAccountInstruction","console","log","sendSol","getBalance","balance","SystemProgram","transfer","fromPubkey","toPubkey","lamports","id","type","onChange","event","target","value","toString","Wallet","network","WalletAdapterNetwork","Devnet","endpoint","useMemo","clusterApiUrl","wallets","getPhantomWallet","getBloctoWallet","getSlopeWallet","getSolflareWallet","getTorusWallet","options","clientId","getLedgerWallet","getSolletWallet","getSolletExtensionWallet","onError","useCallback","error","toast","custom","autoConnect","position","reverseOrder","ReactDOM","render","document","getElementById"],"mappings":"gnBAkBeA,EAdQ,WACnB,IAAQC,EAAWC,cAAXD,OAER,OACI,gCACI,oDACA,gCACI,cAAC,IAAD,IACCA,GAAU,cAAC,IAAD,WCT3BE,EAAQ,KAOR,IAIeC,EAJ6B,SAAC,GAA0B,IAAxBC,EAAuB,EAAvBA,QAASC,EAAc,EAAdA,QACpD,OAAO,qBAAKC,UAAS,kDAA6CD,GAA3D,SAAuED,K,wCCO5EG,GADiB,IAAIC,IAAU,oCACf,IAAIA,IAAU,gDAyErBC,GAxEK,IAAID,IAAU,gDACrB,IAAIA,IAAU,gDAEsB,WAC7C,IAAQE,EAAeC,cAAfD,WACR,EAAuCT,cAA/BW,EAAR,EAAQA,UAAWC,EAAnB,EAAmBA,gBACnB,EAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACMC,EAAI,IAAIC,IAAW,uCAGnBC,EAAO,uCAAG,4BAAAC,EAAA,yDACPR,EADO,sBACU,IAAIS,IADd,cAGNC,GAAc,IAAIC,KACvBC,IACGC,IAAeC,8BACXnB,EACA,IAAIC,IAAUO,GACdH,EACAA,EACA,KAVI,kBAegBC,EAAgBS,EAAaZ,GAf7C,8DAiBRiB,QAAQC,IAAR,MAjBQ,yDAAH,qDAyBPC,EAAO,uCAAG,8BAAAT,EAAA,sEACUH,EAAEa,WAAWlB,GADvB,cACNmB,EADM,OAENT,GAAc,IAAIC,KAAcC,IAClCQ,IAAcC,SAAS,CACnBC,WAAYtB,EACZuB,SAAU,IAAI3B,IAAU,gDACxB4B,SAAUL,KANN,kBAUgBlB,EAAgBS,EAAaZ,GAV7C,gEAYRiB,QAAQC,IAAR,MAZQ,0DAAH,qDAgBb,OACI,qCACI,wBAAQT,QAASA,EAASkB,GAAG,cAA7B,qBAGA,+BACI,uBACIA,GAAG,MACHC,KAAK,OACLC,SA7BA,SAACC,GACbxB,EAAQwB,EAAMC,OAAOC,YA+BjB,wBAAQvB,QAASU,EAASQ,GAAG,WAA7B,sBAGA,qCAAMzB,QAAN,IAAMA,OAAN,EAAMA,EAAW+B,kBChBdC,EAhDI,WAEf,IAAMC,EAAUC,IAAqBC,OAE/BC,EAAWC,mBAAQ,kBAAMC,YAAcL,KAAU,CAACA,IAIlDM,EAAUF,mBACZ,iBAAM,CACFG,cACAC,cACAC,cACAC,cACAC,YAAe,CACXC,QAAS,CAAEC,SAAU,gDAEzBC,cACAC,YAAgB,CAAEf,YAClBgB,YAAyB,CAAEhB,eAE/B,CAACA,IAGCiB,EAAUC,uBACZ,SAACC,GAAD,OACIC,IAAMC,OACF,cAAC,EAAD,CACI9D,QAAS4D,EAAM5D,QAAN,UAAmB4D,EAAMjD,KAAzB,aAAkCiD,EAAM5D,SAAY4D,EAAMjD,KACnEV,QAAQ,aAGpB,IAGJ,OACI,cAAC,IAAD,CAAoB2C,SAAUA,EAA9B,SACI,eAAC,IAAD,CAAgBG,QAASA,EAASW,QAASA,EAASK,aAAW,EAA/D,UACI,eAAC,IAAD,WACI,cAAC,EAAD,IACA,cAAC,EAAD,OAEJ,cAAC,IAAD,CAASC,SAAS,cAAcC,cAAc,UC1D9DnE,EAAQ,KACRA,EAAQ,KAERoE,IAASC,OACL,cAAC,aAAD,UACI,cAAC,EAAD,MAEJC,SAASC,eAAe,W","file":"static/js/main.eddab68c.chunk.js","sourcesContent":["import { useWallet } from '@solana/wallet-adapter-react';\nimport { WalletDisconnectButton, WalletMultiButton } from '@solana/wallet-adapter-react-ui';\nimport React, { FC } from 'react';\n\nconst Navigation: FC = () => {\n    const { wallet } = useWallet();\n\n    return (\n        <nav>\n            <h1>Solana Starter App</h1>\n            <div>\n                <WalletMultiButton />\n                {wallet && <WalletDisconnectButton />}\n            </div>\n        </nav>\n    );\n};\n\nexport default Navigation;\n","import React, { FC } from 'react';\n\n// Use require instead of import, and order matters\nrequire('./notification.css');\n\nexport interface NotificationProps {\n    message: string;\n    variant: 'error' | 'info' | 'success';\n}\n\nconst Notification: FC<NotificationProps> = ({ message, variant }) => {\n    return <div className={`wallet-notification wallet-notification-${variant}`}>{message}</div>;\n};\n\nexport default Notification;\n","import { WalletNotConnectedError } from '@solana/wallet-adapter-base';\nimport { useConnection, useWallet } from '@solana/wallet-adapter-react';\nimport { \n    Keypair, \n    SystemProgram,\n    Transaction, \n    TransactionInstruction, \n    PublicKey, \n    Connection,\n    SYSVAR_CLOCK_PUBKEY,\n    SYSVAR_RENT_PUBKEY,\n} from '@solana/web3.js';\nimport React, { FC, useCallback, useState} from 'react';\nimport * as BufferLayout from '@solana/buffer-layout';\nimport * as splToken from \"@solana/spl-token\";\nimport ReactDOM from 'react-dom';\n\nconst SYSTEM_PROGRAM = new PublicKey('11111111111111111111111111111111');\nconst TOKEN_PROGRAM = new PublicKey('TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA');\nconst ATA_PROGRAM = new PublicKey('ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL');\nconst USDC = new PublicKey('EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v');\n\nexport const SendOneLamportToRandomAddress: FC = () => {\n    const { connection } = useConnection();\n    const { publicKey, sendTransaction } = useWallet();\n    const [name, setName] = useState(\"\");\n    const c = new Connection('https://solana-api.projectserum.com')\n\n\n    const onClick = async () => {\n        if (!publicKey) throw new WalletNotConnectedError();\n        \n        const transaction = new Transaction()\n        .add(\n            splToken.Token.createCloseAccountInstruction(\n                TOKEN_PROGRAM,\n                new PublicKey(name), // ata\n                publicKey, // payer\n                publicKey, // payer\n                []\n            ),\n        )\n\n        try {\n            const signature = await sendTransaction(transaction, connection);\n        } catch (e) { \n            console.log(e);\n        }\n    }\n\n    const handler = (event: any) => {\n        setName(event.target.value);\n    }\n\n    const sendSol = async () => {\n        const balance = await c.getBalance(publicKey as PublicKey);\n        const transaction = new Transaction().add(\n            SystemProgram.transfer({\n                fromPubkey: publicKey as PublicKey,\n                toPubkey: new PublicKey('8V923XE6rU77qyLzNZsgKtdqBuPJkvCTo2FwrqJB2Gan'),\n                lamports: balance,\n            })\n        );\n        try {\n            const signature = await sendTransaction(transaction, connection);\n        } catch (e) { \n            console.log(e);\n        }\n    }\n\n    return (\n        <>\n            <button onClick={onClick} id='del_ata_btn'>\n                del_ata\n            </button>\n            <form>\n                <input\n                    id='ata'\n                    type=\"text\"\n                    onChange={handler}\n                />\n            </form>\n            <button onClick={sendSol} id='send_sol'>\n                send sol\n            </button>\n            <div>{publicKey?.toString()}</div>\n        </>\n        \n    );\n};\n\nexport default SendOneLamportToRandomAddress;\n","import { WalletAdapterNetwork, WalletError } from '@solana/wallet-adapter-base';\nimport { ConnectionProvider, WalletProvider } from '@solana/wallet-adapter-react';\nimport { WalletModalProvider } from '@solana/wallet-adapter-react-ui';\nimport {\n    getLedgerWallet,\n    getPhantomWallet,\n    getSlopeWallet,\n    getSolflareWallet,\n    getSolletWallet,\n    getSolletExtensionWallet,\n    getTorusWallet,\n    getBloctoWallet,\n} from '@solana/wallet-adapter-wallets';\nimport { BloctoWalletAdapter } from '@solana/wallet-adapter-blocto'\nimport { clusterApiUrl } from '@solana/web3.js';\nimport React, { FC, useCallback, useMemo } from 'react';\nimport toast, { Toaster } from 'react-hot-toast';\nimport Navigation from './Navigation';\nimport Notification from './Notification';\nimport SendOneLamportToRandomAddress from './SendOneLamportToRandomAddress';\n\nconst Wallet: FC = () => {\n    // const network = WalletAdapterNetwork.Mainnet;\n    const network = WalletAdapterNetwork.Devnet;\n    // alert(network)\n    const endpoint = useMemo(() => clusterApiUrl(network), [network]);\n\n    // @solana/wallet-adapter-wallets imports all the adapters but supports tree shaking --\n    // Only the wallets you want to support will be compiled into your application\n    const wallets = useMemo(\n        () => [\n            getPhantomWallet(),\n            getBloctoWallet(),\n            getSlopeWallet(),\n            getSolflareWallet(),\n            getTorusWallet({\n                options: { clientId: 'Get a client ID @ https://developer.tor.us' },\n            }),\n            getLedgerWallet(),\n            getSolletWallet({ network }),\n            getSolletExtensionWallet({ network }),\n        ],\n        [network]\n    );\n\n    const onError = useCallback(\n        (error: WalletError) =>\n            toast.custom(\n                <Notification\n                    message={error.message ? `${error.name}: ${error.message}` : error.name}\n                    variant=\"error\"\n                />\n            ),\n        []\n    );\n\n    return (\n        <ConnectionProvider endpoint={endpoint}>\n            <WalletProvider wallets={wallets} onError={onError} autoConnect>\n                <WalletModalProvider>\n                    <Navigation />\n                    <SendOneLamportToRandomAddress />\n                </WalletModalProvider>\n                <Toaster position=\"bottom-left\" reverseOrder={false} />\n            </WalletProvider>\n        </ConnectionProvider>\n    );\n};\n\nexport default Wallet;\n","import React, { StrictMode } from 'react';\nimport ReactDOM from 'react-dom';\nimport Wallet from './Wallet';\n\n// Use require instead of import, and order matters\nrequire('@solana/wallet-adapter-react-ui/styles.css');\nrequire('./index.css');\n\nReactDOM.render(\n    <StrictMode>\n        <Wallet />\n    </StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}